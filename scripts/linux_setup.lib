#!/bin/bash

## ============================================================================
##             **** Murasame Application Development Framework ****
##                Copyright (C) 2019-2021, Suisei Entertainment
## ============================================================================
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
## ============================================================================

# shellcheck disable=SC1091
. ./scripts/utilities.lib

WORKSPACE_DIRECTORY="${HOME}/.murasame"
VIRTUALENV_DIRECTORY="${WORKSPACE_DIRECTORY}/.env"
PYTHON_VERSION=$(python3 -V 2>&1 | grep -Po '(?<=Python )(.+)')
SUBLIME_VERSION=$(subl -v 2>&1 | grep -Po '(?<=Sublime Text Build )(.+)')
DOCKER_VERSION=$(docker version --format '{{.Server.Version}}')
CUSTOM_FONT_FOUND=$(fc-list | grep consolas)
SUBLIME_CONFIG_DIR="${HOME}/.config/sublime-text-3"
SUBLIME_PACKAGE_INSTALL_DIR="${SUBLIME_CONFIG_DIR}/Installed Packages"
PACKAGE_CONTROL_FILE="${SUBLIME_PACKAGE_INSTALL_DIR}/Package Control.sublime-package"
SUBLIME_USER_DIR="${SUBLIME_CONFIG_DIR}/Packages/User"
PORTAINER_INSTALLED=$(docker volume ls | grep portainer)
NODEJS_INSTALLED=$(which nodejs)
NPM_INSTALLED=$(which npm)
SNYK_INSTALLED=$(which snyk)

linux_install_dependencies()
{
    # Installs all required packages on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Installing package dependencies..."

    apt update
    apt install -y \
        htop \
        mc \
        git \
        make \
        wget \
        curl \
        build-essential \
        virtualenv \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg-agent

    # Scc is not available through apt, but there's a snap package, so use
    # that to install it.
    snap install scc

    echo "[MURASAME.SETUP] > Package dependencies installed."
}

linux_setup_directories()
{

    # Creates the necessary workspace directories inside the user's home
    # directory.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Configuring workspace directories..."

    if [ ! -d "${WORKSPACE_DIRECTORY}" ]
    then
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}"
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}/build"
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}/dist"
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}/testfiles"
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}/logs"
        mkdir -p -m 777 "${WORKSPACE_DIRECTORY}/logs/unittest"

        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}"
        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}/build"
        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}/dist"
        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}/testfiles"
        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}/logs"
        chown "${SUDO_USER}" "${WORKSPACE_DIRECTORY}/logs/unittest"
    fi

    echo "[MURASAME.SETUP] > Directories configured."
}

linux_install_python()
{
    # Installs Python 3.9 on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for local installation of Python 3.9..."

    vercomp "${PYTHON_VERSION}" "3.9.1"

    case $? in
        0) op='=';;
        1) op='>';;
        2) op='<';;
    esac

    if [ "$op" == '<' ]
    then
        echo "[MURASAME.SETUP] > Python 3.9 is not installed, installing..."
        add-apt-repository -y ppa:deadsnakes/ppa
        apt install -y python3.9 python3.9-dev python3.9-distutils
    fi

    echo "[MURASAME.SETUP] > Python 3.9 installed."
}

linux_install_sublime()
{
    # Installs the Sublime Text 3 on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking installation of Sublime Text 3 on the host system..."

    if [ "${SUBLIME_VERSION}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing Sublime Text 3..."
        wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add
        apt install -y apt-transport-https
        echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
        apt update
        apt install -y sublime-text

        # Create basic Sublime directories as they don't exist until Sublime
        # Text 3 is started at least once, but we have to copy contents to
        # them.
        mkdir -p -m 777 "${SUBLIME_CONFIG_DIR}"
        mkdir -p -m 777 "${SUBLIME_PACKAGE_INSTALL_DIR}"
        mkdir -p -m 777 "${SUBLIME_USER_DIR}"
    fi

    echo "[MURASAME.SETUP] > Sublime Text 3 installed."
}

linux_install_fonts()
{
    # Installs the custom editor fonts on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Looking for custom editor fonts on the host system..."

    if [ "${CUSTOM_FONT_FOUND}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing custom editor fonts..."
        wget -O /tmp/YaHei.Consolas.1.12.zip https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/uigroupcode/YaHei.Consolas.1.12.zip
        unzip /tmp/YaHei.Consolas.1.12.zip
        mkdir -p /usr/share/fonts/consolas
        mv YaHei.Consolas.1.12.ttf /usr/share/fonts/consolas/
        chmod 644 /usr/share/fonts/consolas/YaHei.Consolas.1.12.ttf
        current_dir=$PWD
        cd /usr/share/fonts/consolas || exiit
        mkfontscale && mkfontdir && fc-cache -fv
        cd "${current_dir}" || exit
    fi

    echo "[MURASAME.SETUP] > Custom fonts installed."
}

linux_install_package_control()
{
    # Installs Package Control for Sublime Text 3.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for installation of Package Control..."
    if [ ! -f "${PACKAGE_CONTROL_FILE}" ]
    then
        echo "[MURASAME.SETUP] > Installing Package Control..."
        curl "https://packagecontrol.io/Package%20Control.sublime-package" > "${SUBLIME_PACKAGE_INSTALL_DIR}/Package Control.sublime-package"
    fi
    echo "[MURASAME.SETUP] > Package Control installed."
}

linux_install_sublime_packages()
{
    # Installs various Sublime packages.
    #
    # This works by providing a custom configuration file for PackageControl
    # listing all the packages that we want to have. This will force Sublime to
    # download and install these upon first start.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Installing Sublime packages..."

    cp "./scripts/settings/Package Control.sublime-settings" "${SUBLIME_USER_DIR}"
    chown "${SUDO_USER}" "${SUBLIME_USER_DIR}/Package Control.sublime-settings"

    echo "[MURASAME.SETUP] > Sublime Packages installed."
}

linux_install_sublime_configuration()
{
    # Installs custom configuration for Sublime Text 3 and the installed
    # packages.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Installing custom Sublime Text configuration..."

    cp "./scripts/settings/Preferences.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/A File Icon.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/Anaconda.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/AutoDocString.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/Emmet.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/Log Highlight.sublime-settings" "${SUBLIME_USER_DIR}"
    cp "./scripts/settings/trailing_spaces.sublime-settings" "${SUBLIME_USER_DIR}"

    chown -R "${SUDO_USER}" "${SUBLIME_CONFIG_DIR}"

    echo "[MURASAME.SETUP] > Custom Sublime configuration installed."
}

linux_install_docker()
{
    # Installs Docker on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking the local installation of Docker..."

    if [ "${DOCKER_VERSION}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing Docker..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt update
        apt install -y docker-ce docker-ce-cli containerd.io
    fi

    echo "[MURASAME.SETUP] > Docker installed."
}

linux_install_portainer()
{
    # Installs a Portainer container for Docker.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for existence of a Portainer installation..."

    if [ "${PORTAINER_INSTALLED}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing Portainer..."
        docker volume create portainer_data
        docker run -d \
            -p 8000:8000 \
            -p 9000:9000 \
            --name=portainer \
            --restart=always \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v portainer_data:/data portainer/portainer-ce
    fi

    echo "[MURASAME.SETUP] > Portainer installed."
}

linux_create_virtualenv()
{
    # Creates the virtualenv environment for development.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Creating virtualenv..."

    virtualenv --python=python3.9 "${VIRTUALENV_DIRECTORY}"
    ./scripts/configure_virtualenv.sh

    echo "[MURASAME.SETUP] > Virtualenv has been created."
}

linux_install_nodejs()
{
    # Installs NodeJS on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for local installation of NodeJS..."

    if [ "${NODEJS_INSTALLED}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing NodeJS..."
        curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
        apt install -y nodejs
    fi

    echo "[MURASAME.SETUP] > NodeJS installed."
}

linux_install_npm()
{
    # Installs npm on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for local installation of npm..."

    if [ "${NPM_INSTALLED}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing npm..."
        apt install -y npm
    fi

    echo "[MURASAME.SETUP] > Npm installed."
}

linux_install_snyk()
{
    # Installs the Snyk CLI on the host system.
    #
    # Authors:
    #   Attila Kovacs

    echo "[MURASAME.SETUP] > Checking for local installation of snyk..."

    if [ "${SNYK_INSTALLED}" == "" ]
    then
        echo "[MURASAME.SETUP] > Installing Snyk..."

        linux_install_nodejs
        linux_install_npm

        npm install -g snyk
    fi

    echo "[MURASAME.SETUP] > Snyk installed."
}
