#!/usr/bin/python3

## ============================================================================
##             **** Murasame Application Development Framework ****
##                Copyright (C) 2019-2021, Suisei Entertainment
## ============================================================================
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
## ============================================================================

"""
Installs a development environment on the local machine.

The setup process has the following steps:
    - Create workspace directories
    - Install dependency packages
    - Install Python 3.9
    - Install Sublime on the local machine
    - Install Package Control
    - Install packages
    - Install custom Sublime configuration
    - Install Docker

Authors:
    Attila Kovacs
"""

# Platform Imports
import os
import sys
import logging
import subprocess
from typing import Callable

# Dependency Imports
import coloredlogs

"""
Path to the log file of the install script.
"""
LOG_FILE_PATH = \
    os.path.abspath(os.path.expanduser('~/.murasame/logs/envinstall.log'))

"""
Path to the directory where the templates are stored.
"""
SCRIPT_DIRECTORY_PATH = os.path.abspath(os.path.expanduser('./scripts'))

"""
Path to the file containing the template for the Package Control settings.
"""
PACKAGE_CONTROL_SETTINGS_TEMPLATE_PATH = \
    os.path.abspath(os.path.expanduser(f'{SCRIPT_DIRECTORY_PATH}/Package Control.sublime-settings.in'))

"""
Path to the directory where Sublime settings are stored.
"""
SUBLIME_USER_DIRECTORY_PATH = \
    os.path.abspath(os.path.expanduser('~/.config/sublime-text-3/Packages/User'))

"""
Path to the Package Control settings file.
"""
PACKAGE_CONTROL_SETTINGS_PATH = \
    os.path.abspath(os.path.expanduser(f'{SUBLIME_USER_DIRECTORY_PATH}/Package Control.sublime-settings'))

"""
Mapping for various sublime packages to their configuration templates and
config files.
"""
CONFIG_FILE_MAP = \
{
    'sublime':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/Preferences.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/Preferences.sublime-settings'
    },
    'a_file_icon':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/A File Icon.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/A File Icon.sublime-settings'
    },
    'anaconda':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/Anaconda.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/Anaconda.sublime-settings'
    },
    'autodocscring':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/AutoDocString.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/AutoDocString.sublime-settings'
    },
    'emmet':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/Emmet.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/Emmet.sublime-settings'
    },
    'log_highlight':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/Log Highlight.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/Log Highlight.sublime-settings'
    },
    'trailing_spaces':
    {
        'template': f'{SCRIPT_DIRECTORY_PATH}/trailing_spaces.sublime-settings.in',
        'config': f'{SUBLIME_USER_DIRECTORY_PATH}/trailing_spaces.sublime-settings'
    }
}

def install_sublime() -> int:

    """
    Installs Sublime on the local machine.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')

    try:
        app_check = subprocess.check_output(
            'dpkg -l sublime-text | grep sublime-text',
            shell=True)
        output = str(app_check, encoding='utf-8')
        if 'Sublime Text is a sophisticated text editor for code' in output:
            logger.debug('[STEP #1] Sublime Text is already installed on the local machine.')
            return 0

    except subprocess.CalledProcessError:
        logger.debug('[STEP #6]     - Failed to check for the presence of Sublime Text.')
        return -1

    logger.debug('[STEP #1] Installing Sublime on the local machine...')

    if sys.platform == 'linux':
        logger.debug('[STEP #1] Installing Sublime on Linux...')
        try:
            subprocess.run(
                'wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add ',
                shell=True)
            subprocess.run(
                'apt-get install apt-transport-https',
                shell=True)
            subprocess.run(
                'echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list',
                shell=True)
            subprocess.run(
                'apt-get update',
                shell=True)
            subprocess.run(
                'apt-get install sublime-text',
                shell=True)
        except subprocess.CalledProcessError:
            logger.error(f'[STEP #1]     - Failed to install Sublime')
            return -2
    else:
        logger.error(f'[STEP #1]     - Unsupported operating system: {sys.platform}.')
        return -1

    logger.debug('[STEP #1] Sublime installed successfully.')
    return 0


def install_fonts() -> int:

    """
    Installs custom Sublime fonts to be used.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')

    try:
        font_found = subprocess.check_output(
            'fc-list | grep consolas',
            shell=True)
        output = str(font_found, encoding='utf-8')
        if output is not "":
            logger.debug('[STEP #2] Custom fonts are already installed.')
            return 0

    except subprocess.CalledProcessError:
        logger.error('[STEP #2]     - Failed to check for custom font availability.')
        return -1

    logger.debug('[STEP #2] Installing custom fonts on the local machine...')

    try:
        subprocess.run(
            'wget -O /tmp/YaHei.Consolas.1.12.zip https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/uigroupcode/YaHei.Consolas.1.12.zip',
            shell=True)
        subprocess.run(
            'unzip /tmp/YaHei.Consolas.1.12.zip',
            shell=True)
        subprocess.run(
            'sudo mkdir -p /usr/share/fonts/consolas',
            shell=True)
        subprocess.run(
            'sudo mv YaHei.Consolas.1.12.ttf /usr/share/fonts/consolas/',
            shell=True)
        subprocess.run(
            'sudo chmod 644 /usr/share/fonts/consolas/YaHei.Consolas.1.12.ttf',
            shell=True)
        subprocess.run(
            'cd /usr/share/fonts/consolas',
            shell=True)
        subprocess.run(
            'sudo mkfontscale && sudo mkfontdir && sudo fc-cache -fv',
            shell=True)
    except subprocess.CalledProcessError:
        logger.error('[STEP #2]     - Failed to install custom fonts.')
        return -1

    logger.debug('[STEP #2] Custom fonts installed successfully.')
    return 0

def install_package_control() -> int:

    """
    Installs package control in Sublime.

    Luckily PackageControl's latest verion has a permalink that can be used to
    download it from their site.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    package_path = os.path.abspath(os.path.expanduser('~/.config/sublime-text-3/Installed Packages/Package Control.sublime-package'))

    if os.path.isfile(package_path):
        logger.debug('[STEP #3] Package Control is already installed.')
        return 0

    logger.debug('[STEP #3] Installing Package Control...')

    package_dir = os.path.abspath(os.path.expanduser('~/.config/sublime-text-3/Installed Packages'))
    try:
        subprocess.run(
            f'curl "https://packagecontrol.io/Package%20Control.sublime-package" > {package_dir}',
            shell=True)
    except subprocess.CalledProcessError:
        logger.error('[STEP #3]     - Failed to install Package Control.')
        return -1

    logger.debug('[STEP #3] Package Control was installed successfully.')
    return 0

def install_sublime_packages() -> int:

    """
    Installs a couple of Sublime packages.

    This works by providing a custom configuration file for PackageControl
    listing all the packages that we want to have. This will force Sublime to
    download and install these upon first start.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #4] Installing Sublime packages...')

    logger.debug('[STEP #4]     - Generating Package Control.sublime-settings...')

    template_content = None
    try:
        with open(PACKAGE_CONTROL_SETTINGS_TEMPLATE_PATH, 'r') as template_file:
            template_content = template_file.read()
    except OSError:
        logger.error('[STEP #4]     - Failed to load the Package Control settings template.')
        return -1

    with open(PACKAGE_CONTROL_SETTINGS_PATH, 'w') as config_file:
        config_file.write(template_content)

def generate_file_from_template(
    step: int,
    template_path: str,
    destination_path: str,
    cb_template_transform: Callable = None) -> int:

    """
    Generatesa config file from a template. By providing an optional callback
    it is also possible to apply a transformation to the template before it
    is written to the file.

    Args:
        step:                   The install step the function is called from.
        template_path:          Path to the template file.
        destination_path:       Path to the configuration file.
        cb_template_transform:  Optional callback that can be used to transform
                                the content of the template before it's written
                                to the config file.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')

    logger.debug(f'[STEP #{step}]          - Reading template file...')

    template_content = None
    try:
        with open(template_path, 'r') as template_file:
            template_content = template_file.read(template_content)
    except OSError:
        logger.error(f'[STEP #{step}]          - Failed to read template file {template_path}.')
        return -1

    if cb_template_transform is not None:
        logger.debug(f'[STEP #{step}]          - Applying template transformation...')
        template_content = cb_template_transform(template_content)
        logger.debug(f'[STEP #{step}]          - Transformation applied.')

    logger.debug(f'[STEP #{step}]          - Writing configuration file...')
    try:
        with open(destination_path, 'w') as config_file:
            config_file.write(template_content)
    except OSError:
        logger.error(f'[STEP #{step}]          - Failed to write config file {destination_path}.')
        return -2

    return 0

def install_sublime_configuration() -> int:

    """
    Installs custom Sublime configuration.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #5] Installing custom Sublime configuration...')

    logger.debug('[STEP #5]     - Installing custom Sublime settings...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['sublime']['template'],
        destination_path=CONFIG_FILE_MAP['sublime']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for A File Icon...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['a_file_icon']['template'],
        destination_path=CONFIG_FILE_MAP['a_file_icon']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for Anaconda...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['anaconda']['template'],
        destination_path=CONFIG_FILE_MAP['anaconda']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for AutoDocString...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['autodocscring']['template'],
        destination_path=CONFIG_FILE_MAP['autodocscring']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for Emmet...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['emmet']['template'],
        destination_path=CONFIG_FILE_MAP['emmet']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for Log Highlight...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['log_highlight']['template'],
        destination_path=CONFIG_FILE_MAP['log_highlight']['config'])

    logger.debug('[STEP #5]     - Installing custom settings for TrailingSpaces...')
    generate_file_from_template(
        step=5,
        template_path=CONFIG_FILE_MAP['trailing_spaces']['template'],
        destination_path=CONFIG_FILE_MAP['trailing_spaces']['config'])

    logger.debug('[STEP #5] Custom Sublime configuration was installed successfully.')
    return 0

def install_docker() -> int:

    """
    Installs docker on the local machine unless it's already installed.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')

    try:
        docker_check = subprocess.check_output(
            'dpkg -l docker-ce | grep docker-ce',
            shell=True)
        output = str(docker_check, encoding='utf-8')
        if 'Docker: the open-source application container engine' in output:
            logger.debug('[STEP #6] Docker is already installed on the local machine.')
            return 0

    except subprocess.CalledProcessError:
        logger.debug('[STEP #6]     - Failed to check for the presence of Docker.')
        return -1

    logger.debug('[STEP #6] Installing Docker on the local machine...')

    try:
        subprocess.run('apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common',
                       shell=True)
        subprocess.run('curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -',
                       shell=True)
        subprocess.run('add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"',
                       shell=True)
        subprocess.run('apt-get update',
                       shell=True)
        subprocess.run('apt-get install docker-ce docker-ce-cli containerd.io',
                       shell=True)
    except subprocess.CalledProcessError:
        logger.error(f'[STEP #6]     - Failed to install Docker.')
        return -2

    logger.debug('[STEP #6] Docker was installed successfully.')
    return 0

## ============================================================================
##      >>> MAIN <<<
## ============================================================================
def main() -> None:

    """
    Contains the main logic of the script.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logging.basicConfig(filename=LOG_FILE_PATH,
                        level=logging.DEBUG)
    coloredlogs.install(level='DEBUG')

    result = 0

    result = install_sublime()

    if result == 0:
        result = install_fonts()

    if result == 0:
        result = install_package_control()

    if result == 0:
        result = install_sublime_packages()

    if result == 0:
        result = install_sublime_configuration()

    if result == 0:
        result = install_docker()

    return result

if __name__ == '__main__':
    main()
