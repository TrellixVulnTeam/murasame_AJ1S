#!/usr/bin/python3

## ============================================================================
##             **** Murasame Application Development Framework ****
##                Copyright (C) 2019-2021, Suisei Entertainment
## ============================================================================
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
## ============================================================================

"""
Installs a development environment on the local machine.

The setup process has the following steps:
    - Install Sublime on the local machine
    - Install Package Control
    - Install packages
    - Install custom Sublime configuration

Authors:
    Attila Kovacs
"""

# Platform Imports
import os
import sys
import logging
import subprocess

# Dependency Imports
import coloredlogs

"""
Path to the log file of the install script.
"""
LOG_FILE_PATH = \
    os.path.abspath(os.path.expanduser('~/.murasame/logs/envinstall.log'))

def install_sublime() -> int:

    """
    Installs Sublime on the local machine.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #1] Installing Sublime on the local machine...')

    if sys.platform == 'linux':
        logger.debug('[STEP #1] Installing Sublime on Linux...')
        try:
            subprocess.run(
                'wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add ',
                shell=True)
            subprocess.run(
                'apt-get install apt-transport-https',
                shell=True)
            subprocess.run(
                'echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list',
                shell=True)
            subprocess.run(
                'apt-get update',
                shell=True)
            subprocess.run(
                'apt-get install sublime-text',
                shell=True)
        except subprocess.CalledProcessError:
            logger.error(f'[STEP #1]     - Failed to install Sublime')
            return -2
    else:
        logger.error(f'[STEP #1]     - Unsupported operating system: {sys.platform}.')
        return -1

    logger.debug('[STEP #1] Sublime installed successfully.')
    return 0


def install_package_control() -> int:

    """
    Installs package control in Sublime.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #2] Installing Package Control...')

    logger.debug('[STEP #2] Package Control was installed successfully.')
    return 0

def install_sublime_packages() -> int:

    """
    Installs a couple of Sublime packages.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #3] Installing Sublime packages...')

    logger.debug('[STEP #3] All Sublime packages were installed successfully.')
    return 0

def install_configuration() -> int:

    """
    Installs custom Sublime configuration.

    Returns:
        '0' if execution was successful, or an error code otherwise.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logger.debug('[STEP #4] Installing custom Sublime configuration...')

    logger.debug('[STEP #2] Custom Sublime configuration was installed successfully.')
    return 0

## ============================================================================
##      >>> MAIN <<<
## ============================================================================
def main() -> None:

    """
    Contains the main logic of the script.

    Authors:
        Attila Kovacs
    """

    logger = logging.getLogger('murasame.environment')
    logging.basicConfig(filename=LOG_FILE_PATH,
                        level=logging.DEBUG)
    coloredlogs.install(level='DEBUG')

    result = 0

    result = install_sublime()

    if result == 0:
        result = install_package_control()

    if result == 0:
        result = install_sublime_packages()

    if result == 0:
        result = install_configuration()

    return result

if __name__ == '__main__':
    main()